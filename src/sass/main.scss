@use 'layout';
@use 'colors';
@use 'sass:color';
@use 'sass:math';
@use 'spacing';
@use 'responsive';

* {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    font-family: 'Open Sans', sans-serif;
    color: colors.$black;
    font-weight: 600;
    box-sizing: border-box;
}

html {
    @include spacing.full-height;
}

html,
body {
    padding: 0;
    margin: 0;
}

body {
    min-height: 100%;
    @include layout.grid($gap: 0, $align-content: stretch, $justify-content: stretch);
}

button {
    --height: auto;
    --font-size: 1.1rem;
    --primary-color: #{colors.$blue};
    --secondary-color: #{colors.$white};

    background-color: var(--primary-color);
    color: var(--secondary-color);
    border: 2px solid var(--primary-color);
    border-radius: spacing.multiply(1);
    height: var(--height);

    transition: all 150ms;

    cursor: pointer;

    font-weight: 700;
    font-size: var(--font-size);

    margin: 0;
    padding: spacing.multiply(2) spacing.multiply(3);

    &.large {
        --font-size: 2rem;
    }

    &.square {
        --height: calc(1.5 * var(--font-size));
        padding: 0;
    }

    &.purple {
        --primary-color: #{colors.$purple};
    }

    &.yellow {
        --primary-color: #{colors.$yellow};
        --secondary-color: #{colors.$black};
    }

    &.dark-gray {
        --primary-color: #{colors.$dark-gray};
    }

    @mixin outlined-button {
        background-color: unset;
        color: var(--primary-color);
    }

    &.outlined {
        @include outlined-button;
    }

    &.toggle:not([data-toggled]) {
        --primary-color: #{colors.$dark-gray};
        @include outlined-button;
    }

    &:hover {
        transform: scale(1.05);
    }

    &:active {
        transform: scale(0.95);
    }
}

p {
    margin: 0;
    padding: 0;
}

.text {
    --font-size: 36px;
    --correction: 10.5px;

    @include responsive.mobile-screen {
        --font-size: 26px;
        --correction: 7.4px;
    }

    font-size: var(--font-size);
    line-height: calc(var(--font-size) + var(--correction));

    &::before {
        content: '';
        display: table;
        margin-bottom: calc(-1 * var(--correction));
    }

    &::after {
        content: '';
        display: table;
        margin-top: calc(-1 * var(--correction));
    }

    &.small {
        --font-size: 18px;
        --correction: 5.5px;

        @include responsive.mobile-screen {
            --font-size: 13px;
            --correction: 3.5px;
        }
    }

    &.medium {
        --font-size: 27px;
        --correction: 8.8px;

        @include responsive.mobile-screen {
            --font-size: 20px;
            --correction: 5.5px;
        }
    }
}

.full-width {
    @include spacing.full-width;
}

.full-height {
    @include spacing.full-height;
}

.full-size {
    @include spacing.full-size;
}

.square {
    aspect-ratio: 1;
}

.hidden {
    display: none;
}

.grid,
.stack,
.row {
    @include layout.grid;
    @for $space from 0 through 10 {
        &.gap-#{$space} {
            @include layout.grid-gap($space);
        }
    }
}

.grid {
    $alignment-directions: (justify, align);
    $content-alignment-options: (start, center, end, stretch, space-around, space-between, space-evenly);

    @each $direction in $alignment-directions {
        @each $alignment in $content-alignment-options {
            &.#{direction}-content-#{alignment} {
                @include layout.grid-alignment(#{$direction}-content, $alignment);
            }

            &.#{direction}-items-#{alignment} {
                @include layout.grid-alignment(#{$direction}-items, $alignment);
            }
        }
    }
}

.page {
    @include spacing.full-size;
    padding: spacing.multiply(4) spacing.multiply(2);
}

.page:not(.active) {
    display: none;
}

.template {
    display: none;
}

.game {
    @include layout.grid($gap: 10);
    row-gap: spacing.multiply(4);
    grid-template-columns: minmax(auto, 600px) auto;

    #info {
        grid-column: 1 / span 2;
    }

    @include responsive.mobile-screen {
        @include layout.grid-gap(4);
        grid-template-columns: 1fr;

        #info {
            grid-column: 1;
        }
    }
}

#table {
    @include layout.grid($gap: 0);
    grid-template: repeat(9, 1fr) / repeat(9, 1fr);

    $thinWidth: 1px;
    $thickWidth: 4px;
    border: $thickWidth solid colors.$black;
    border-bottom: none;
    border-right: none;

    -webkit-user-select: none; /* Safari */
    -moz-user-select: none; /* Firefox */
    -ms-user-select: none; /* IE10+/Edge */
    user-select: none; /* Standard */

    .cell {
        @include layout.grid($gap: 0, $align-items: center, $justify-items: center);
        grid-template: repeat(3, 1fr) / repeat(3, 1fr);
        color: colors.$blue;
        cursor: pointer;

        position: relative;
        text-align: center;

        border: $thinWidth solid colors.$black;
        border-left: none;
        border-top: none;

        transition: all 150ms;

        @for $i from 0 through 8 {
            @if $i % 3 == 2 {
                &[data-row='#{$i}'] {
                    border-bottom-width: $thickWidth;
                }
                &[data-column='#{$i}'] {
                    border-right-width: $thickWidth;
                }
            }
        }

        // please note order of these states matter and they shouldn't exchange places
        &.experimental {
            color: colors.$purple;

            &.selected-by-position {
                background-color: color.change(colors.$purple, $alpha: 0.4, $saturation: 60%, $lightness: 80%);
            }

            &.selected-by-value {
                background-color: color.change(colors.$purple, $alpha: 0.4, $saturation: 60%);
            }

            &.active {
                background-color: color.change(colors.$purple, $alpha: 0.7, $saturation: 90%, $lightness: 80%);
            }
        }

        &.selected-by-position {
            background-color: color.change(colors.$light-blue, $alpha: 0.4, $saturation: 50%);
        }

        &.selected-by-value {
            background-color: color.change(colors.$light-blue, $alpha: 0.4, $saturation: 50%, $lightness: 50%);
        }

        &.hinted {
            background-color: colors.$yellow;
        }

        &.conflicting {
            color: colors.$red;
            background-color: color.change(colors.$red, $alpha: 0.4, $saturation: 50%, $lightness: 50%);
        }

        &.active {
            background-color: colors.$light-blue;
        }

        &.locked {
            color: colors.$black;
        }

        &.solved {
            color: colors.$green;
            background-color: color.change(colors.$green, $alpha: 0.4, $saturation: 50%, $lightness: 50%);
        }

        .note {
            color: colors.$gray;

            @for $value from 1 through 9 {
                &[data-value='#{$value}'] {
                    $row: math.ceil(math.div($value, 3));
                    $column: $value % 3;
                    @if $column == 0 {
                        $column: 3;
                    }
                    grid-row: $row;
                    grid-column: $column;
                }
            }
        }

        .value {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            @include spacing.full-width;
            color: inherit;
        }
    }
}

.button-panel {
    @include layout.grid($gap: 2);
    grid-template-areas:
        'm  m  m '
        'b1 b2 b3'
        'b4 b5 b6'
        'b7 b8 b9'
        'e  n  h '
        'x  x  x ';

    @include responsive.mobile-screen {
        // @include layout.grid-gap(4);
        grid-template-areas:
            'b1 b2 b3 b4 b5'
            'b6 b7 b8 b9 e '
            'n  .  h  .  x'
            'm  m  m  m  m';
    }

    button.set-value {
        justify-self: center;
    }

    @for $value from 1 through 9 {
        button[data-value='#{$value}'] {
            grid-area: b#{$value};
        }
    }

    button.erase {
        grid-area: e;
    }

    button.notes {
        grid-area: n;
    }

    button.hint {
        grid-area: h;
    }

    button.experiment {
        grid-area: x;
    }

    button.menu {
        grid-area: m;
    }
}

.page[data-title="scan"] {
    padding-inline: 0;
}

.scan-page-layout {
    display: flex;
    flex-direction: column;
    justify-content: start;
    align-items: stretch;

    @include spacing.full-size;

    .camera-feed {
        flex-grow: 1;
        position: relative;

        #camera-video {
            @include spacing.full-size;
            filter: brightness(0.2);
        }

        #output {
            position: absolute;
            top: 50%;
            left: 50%;
            width: 70%;
            aspect-ratio: 1;

            transform: translate(-50%, -50%);

            z-index: 100;
        }
    }
}
